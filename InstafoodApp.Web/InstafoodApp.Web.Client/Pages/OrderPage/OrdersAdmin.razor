@page "/orders-list"
@attribute [Authorize(Roles = "Admin")]
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject NavigationManager _nav
@inject IOrderService _orderService

<PageTitle></PageTitle>
<PageTitle>Orders Manage</PageTitle>
<div class="w-100 px-2 row">
    <div class="d-flex align-items-center py-2 px-0 sticky-top bg-white border-bottom border-dark">
        <label for="statusFilter" class="col form-label ms-3">Filter by Status</label>
        <select id="statusFilter" class="col form-select" @onchange="FilterOrders">
            <option value="">All</option>
            <option value="Placed">Placed</option>
            <option value="Accepted and Preparing">Accepted and Preparing</option>
            <option value="Out of Delivery">Out of Delivery</option>
            <option value="Delivered">Delivered</option>
            <option value="Declined">Declined</option>
            <option value="Cancelled">Cancelled</option>
        </select>
    </div>
    @if (items == null || !filteredItems.Any())
    {
        <div class="text-center my-5">
            <img src="/images/empty-cart.png" alt="Empty Cart" style="max-height: 200px;" />
            <h3 class="mt-3">No Order Found</h3>
            <p class="text-muted">Looks like there are no orders</p>
        </div>
    }
    else
    {
        @foreach (Order item in filteredItems)
        {
            <div class="border rounded p-2 mb-0">
                <div class="d-flex justify-content-between align-items-center bg-secondary text-white rounded p-2">
                    <span class="">Order ID: @item.OrderId</span>
                    <span class="badge bg-warning text-dark px-2 border rounded">@item.OrderStatus.Status</span>
                </div>
                <div class="mt-2 px-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="small mb-1"><strong>Order Time:</strong>@item.OrderTime.ToString("hh:mm tt") @item.OrderDate</p>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="small"><strong>Customer Name:</strong> @item.Customer.Name</p>
                        <p class="small"><strong>Email:</strong> @item.Customer.Email</p>
                    </div>
                </div>
                <OrderDetails OrderId="@item.OrderId"></OrderDetails>
                <div class="d-flex justify-content-end px-4 pt-2">
                    <p class="small"><strong class="pe-2">Total Cost  :</strong> @item.TotalCost.ToString("F2")</p>
                </div>
                <div class="mt-1 d-flex justify-content-end">
                    <select @onchange="(e) => ChangeOrderStatus(item.OrderId, e.Value.ToString())" class="form-select form-select-sm">
                        <option value="Placed" selected="@(item.OrderStatus.Status == "Placed" ? "selected" : null)">Placed</option>
                        <option value="Accepted and Preparing" selected="@(item.OrderStatus.Status == "Accepted and Preparing" ? "selected" : null)">Accepted and Preparing</option>
                        <option value="Out of Delivery" selected="@(item.OrderStatus.Status == "Out of Delivery" ? "selected" : null)">Out of Delivery</option>
                        <option value="Delivered" selected="@(item.OrderStatus.Status == "Delivered" ? "selected" : null)">Delivered</option>
                        <option value="Declined" selected="@(item.OrderStatus.Status == "Declined" ? "selected" : null)">Declined</option>
                    </select>
                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<Order>? items;
    private IEnumerable<Order>? filteredItems;
    private string? selectedStatus;

    protected override async Task OnInitializedAsync()
    {
        items = (await _orderService.GetAllOrder()).OrderByDescending(o => o.OrderDate).ThenByDescending(o => o.OrderTime);
        filteredItems = items;
    }

    private async Task ChangeOrderStatus(string orderId, string status)
    {
        await _orderService.UpdateOrderStatus(orderId, status);
        await RefreshOrders();
    }

    private async Task RefreshOrders()
    {
        items = (await _orderService.GetAllOrder()).OrderByDescending(o => o.OrderDate).ThenByDescending(o => o.OrderTime);
        FilterOrders(null);
    }

    private void FilterOrders(ChangeEventArgs? e)
    {
        selectedStatus = e?.Value?.ToString() ?? selectedStatus;
        if (string.IsNullOrEmpty(selectedStatus))
        {
            filteredItems = items;
        }
        else
        {
            filteredItems = items?.Where(x => x.OrderStatus.Status == selectedStatus);
        }
    }
}
